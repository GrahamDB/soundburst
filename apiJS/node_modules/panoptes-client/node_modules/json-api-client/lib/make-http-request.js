// Generated by CoffeeScript 1.10.0
(function() {
  var DEFAULT_HEADERS, getsInProgress, makeHTTPRequest, normalizeUrl, request;

  request = require('superagent');

  DEFAULT_HEADERS = require('./default-headers');

  normalizeUrl = require('normalizeurl');

  getsInProgress = {};

  if (request.agent != null) {
    request = request.agent();
  }

  if (request.parse == null) {
    request.parse = {};
  }

  request.parse[DEFAULT_HEADERS['Accept']] = JSON.parse.bind(JSON);

  makeHTTPRequest = function(method, url, data, headers, modify) {
    var key, originalArguments, promisedRequest, requestID, value;
    if (headers == null) {
      headers = {};
    }
    originalArguments = Array.prototype.slice.call(arguments);
    method = method.toLowerCase();
    url = normalizeUrl(url);
    if (method === 'get') {
      for (key in data) {
        value = data[key];
        if (Array.isArray(value)) {
          data[key] = value.join(',');
        }
      }
      requestID = url + " " + (JSON.stringify(data));
      if (getsInProgress[requestID] != null) {
        return getsInProgress[requestID];
      }
    }
    promisedRequest = new Promise(function(resolve, reject) {
      var req;
      req = (function() {
        switch (method) {
          case 'get':
            return request.get(url).query(data);
          case 'head':
            return request.head(url).query(data);
          case 'put':
            return request.put(url).send(data);
          case 'post':
            return request.post(url).send(data);
          case 'delete':
            return request.del(url);
        }
      })();
      req = req.set(headers);
      if (req.withCredentials != null) {
        req = req.withCredentials();
      }
      return req.end(function(error, response) {
        delete getsInProgress[requestID];
        if ((error != null ? error.status : void 0) === 408) {
          return resolve(makeHTTPRequest.apply(null, originalArguments));
        } else if (error != null) {
          return reject(response != null ? response : error);
        } else {
          return resolve(response);
        }
      });
    });
    if (method === 'get') {
      getsInProgress[requestID] = promisedRequest;
    }
    return promisedRequest;
  };

  module.exports = makeHTTPRequest;

}).call(this);
