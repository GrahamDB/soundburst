// Generated by CoffeeScript 1.10.0
(function() {
  var Emitter, Model, isIndex, mergeInto, removeUnderscoredKeys,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Emitter = require('./emitter');

  mergeInto = require('./merge-into');

  isIndex = function(string) {
    var integer;
    integer = parseInt(string, 10);
    return integer.toString(10) === string && !isNaN(integer);
  };

  removeUnderscoredKeys = function(target) {
    var i, key, len, results, results1, value;
    if (Array.isArray(target)) {
      results1 = [];
      for (i = 0, len = target.length; i < len; i++) {
        value = target[i];
        results1.push(removeUnderscoredKeys(value));
      }
      return results1;
    } else if ((target != null) && typeof target === 'object') {
      results = {};
      for (key in target) {
        value = target[key];
        if (key.charAt(0) !== '_') {
          results[key] = removeUnderscoredKeys(value);
        }
      }
      return results;
    } else {
      return target;
    }
  };

  module.exports = Model = (function(superClass) {
    extend(Model, superClass);

    Model.prototype._changedKeys = null;

    function Model() {
      var configs;
      configs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      Model.__super__.constructor.apply(this, arguments);
      this._changedKeys = [];
      mergeInto.apply(null, [this].concat(slice.call(configs)));
      this.emit('create');
    }

    Model.prototype.update = function(changeSet) {
      var base, i, key, lastKey, len, name, path, ref, rootKey, value;
      if (changeSet == null) {
        changeSet = {};
      }
      if (typeof changeSet === 'string') {
        for (i = 0, len = arguments.length; i < len; i++) {
          key = arguments[i];
          if (indexOf.call(this._changedKeys, key) < 0) {
            (ref = this._changedKeys).push.apply(ref, arguments);
          }
        }
      } else {
        for (key in changeSet) {
          if (!hasProp.call(changeSet, key)) continue;
          value = changeSet[key];
          path = key.split('.');
          rootKey = path[0];
          base = this;
          while (path.length !== 1) {
            if (base[name = path[0]] == null) {
              base[name] = isIndex(path[1]) ? [] : {};
            }
            base = base[path.shift()];
          }
          lastKey = path.shift();
          if (value === void 0) {
            if (Array.isArray(base)) {
              base.splice(lastKey, 1);
            } else {
              delete base[lastKey];
            }
          } else {
            base[lastKey] = value;
          }
          if (indexOf.call(this._changedKeys, rootKey) < 0) {
            this._changedKeys.push(rootKey);
          }
        }
      }
      this.emit('change');
      return this;
    };

    Model.prototype.hasUnsavedChanges = function() {
      return this._changedKeys.length !== 0;
    };

    Model.prototype.toJSON = function() {
      return removeUnderscoredKeys(this);
    };

    Model.prototype.destroy = function() {
      this._changedKeys.splice(0);
      return Model.__super__.destroy.apply(this, arguments);
    };

    return Model;

  })(Emitter);

}).call(this);
