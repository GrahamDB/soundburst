// Generated by CoffeeScript 1.10.0
(function() {
  var Model, PLACEHOLDERS_PATTERN, Resource, ResourcePromise,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice,
    modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  Model = require('./model');

  PLACEHOLDERS_PATTERN = /{(.+?)}/g;

  Resource = (function(superClass) {
    extend(Resource, superClass);

    Resource.prototype._type = null;

    Resource.prototype._headers = null;

    Resource.prototype._meta = null;

    Resource.prototype._linksCache = null;

    Resource.prototype._savingKeys = null;

    Resource.prototype._write = Promise.resolve();

    function Resource(_type) {
      this._type = _type;
      if (this._type == null) {
        throw new Error('Don\'t call the Resource constructor directly, use `client.type("things").create({});`');
      }
      this._headers = {};
      this._meta = {};
      this._linksCache = {};
      this._savingKeys = {};
      Resource.__super__.constructor.call(this, null);
      this._type.emit('change');
      this.emit('create');
    }

    Resource.prototype.getMeta = function(key) {
      if (key == null) {
        key = this._type._name;
      }
      return this._meta[key];
    };

    Resource.prototype.update = function() {
      var value;
      value = Resource.__super__.update.apply(this, arguments);
      if (this.id && this._type._resourcesCache[this.id] !== this) {
        this._type._resourcesCache[this.id] = this;
        if (this.href != null) {
          this._type._resourcesCache[this.href] = this;
        }
        this._type.emit('change');
      }
      return value;
    };

    Resource.prototype.save = function() {
      var base, changes, key, payload;
      payload = {};
      changes = this.toJSON.call(this.getChangesSinceSave());
      payload[this._type._name] = changes;
      this._changedKeys.splice(0);
      for (key in changes) {
        if ((base = this._savingKeys)[key] == null) {
          base[key] = 0;
        }
        this._savingKeys[key] += 1;
      }
      this._write = this._write["catch"]((function(_this) {
        return function() {
          return null;
        };
      })(this)).then((function(_this) {
        return function() {
          var save;
          save = _this.id ? _this.refresh(true).then(function() {
            return _this._type._client.put(_this._getURL(), payload, _this._getHeadersForModification());
          }) : _this._type._client.post(_this._type._getURL(), payload);
          return new ResourcePromise(save.then(function(arg) {
            var result;
            result = arg[0];
            for (key in changes) {
              _this._savingKeys[key] -= 1;
              if (_this._savingKeys[key] === 0) {
                delete _this._savingKeys[key];
              }
            }
            if (result !== _this) {
              _this.update(result);
              result.destroy();
            }
            _this.emit('save');
            return _this;
          }));
        };
      })(this));
      return this._write;
    };

    Resource.prototype.getChangesSinceSave = function() {
      var changes, i, key, len, ref;
      changes = {};
      ref = this._changedKeys;
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        changes[key] = this[key];
      }
      return changes;
    };

    Resource.prototype.refresh = function(saveChanges) {
      var changes;
      if (saveChanges) {
        changes = this.getChangesSinceSave();
        return this.refresh().then((function(_this) {
          return function() {
            return _this.update(changes);
          };
        })(this));
      } else if (this.id) {
        return this._type._client.get(this._getURL());
      } else {
        throw new Error('Can\'t refresh a resource with no ID');
      }
    };

    Resource.prototype.uncache = function() {
      if (this.id) {
        this.emit('uncache');
        delete this._type._resourcesCache[this.id];
        return delete this._type._resourcesCache[this.href];
      } else {
        throw new Error('Can\'t uncache a resource with no ID');
      }
    };

    Resource.prototype["delete"] = function() {
      this._write = this._write["catch"]((function(_this) {
        return function() {
          return null;
        };
      })(this)).then((function(_this) {
        return function() {
          var deletion;
          deletion = _this.id ? _this.refresh(true).then(function() {
            return _this._type._client["delete"](_this._getURL(), null, _this._getHeadersForModification());
          }) : Promise.resolve();
          return new ResourcePromise(deletion.then(function() {
            _this.emit('delete');
            _this._type.emit('change');
            _this.destroy();
            return null;
          }));
        };
      })(this));
      return this._write;
    };

    Resource.prototype.get = function(name, query) {
      var cachedByHREF, fullHREF, href, id, ids, ref, ref1, ref2, ref3, ref4, resourceLink, result, type, typeLink;
      if ((this._linksCache[name] != null) && (query == null)) {
        return this._linksCache[name];
      } else {
        resourceLink = (ref = this.links) != null ? ref[name] : void 0;
        typeLink = this._type._links[name];
        result = (resourceLink != null) || (typeLink != null) ? (href = (ref1 = resourceLink != null ? resourceLink.href : void 0) != null ? ref1 : typeLink != null ? typeLink.href : void 0, type = (ref2 = resourceLink != null ? resourceLink.type : void 0) != null ? ref2 : typeLink != null ? typeLink.type : void 0, id = (ref3 = resourceLink != null ? resourceLink.id : void 0) != null ? ref3 : typeLink != null ? typeLink.id : void 0, id != null ? id : id = typeof resourceLink === 'string' ? resourceLink : void 0, ids = (ref4 = resourceLink != null ? resourceLink.ids : void 0) != null ? ref4 : typeLink != null ? typeLink.ids : void 0, ids != null ? ids : ids = Array.isArray(resourceLink) ? resourceLink : void 0, href != null ? (fullHREF = this._applyHREF(href), cachedByHREF = this._type._client.type(type)._resourcesCache[fullHREF], (cachedByHREF != null) && (query == null) ? Promise.resolve(cachedByHREF) : this._type._client.get(fullHREF, query).then(function(links) {
          if (id != null) {
            return links[0];
          } else {
            return links;
          }
        })) : type != null ? this._type._client.type(type).get(id != null ? id : ids, query).then(function(links) {
          if (id != null) {
            return links[0];
          } else {
            return links;
          }
        }) : void 0) : name in this ? Promise.resolve(this[name]) : this._type._client.get(this._getURL(name));
        result.then((function(_this) {
          return function() {
            if (query == null) {
              return _this._linksCache[name] = result;
            }
          };
        })(this));
        return new ResourcePromise(result);
      }
    };

    Resource.prototype._applyHREF = function(href) {
      var context;
      context = {};
      context[this._type._name] = this;
      return href.replace(PLACEHOLDERS_PATTERN, function(_, path) {
        var ref, ref1, segment, segments, value;
        segments = path.split('.');
        value = context;
        while (segments.length !== 0) {
          segment = segments.shift();
          value = (ref = value[segment]) != null ? ref : (ref1 = value.links) != null ? ref1[segment] : void 0;
        }
        if (Array.isArray(value)) {
          value = value.join(',');
        }
        if (typeof value !== 'string') {
          throw new Error("Value for '" + path + "' in '" + href + "' should be a string.");
        }
        return value;
      });
    };

    Resource.prototype.addLink = function(name, value) {
      var data, url;
      url = this._getURL('links', name);
      data = {};
      data[name] = value;
      return this._type._client.post(url, data).then((function(_this) {
        return function() {
          _this.uncacheLink(name);
          return _this.refresh();
        };
      })(this));
    };

    Resource.prototype.removeLink = function(name, value) {
      var url;
      url = this._getURL('links', name, [].concat(value).join(','));
      return this._type._client["delete"](url).then((function(_this) {
        return function() {
          _this.uncacheLink(name);
          return _this.refresh();
        };
      })(this));
    };

    Resource.prototype.uncacheLink = function(name) {
      return delete this._linksCache[name];
    };

    Resource.prototype._getHeadersForModification = function() {
      var header, headers, value;
      headers = {
        'If-Unmodified-Since': this._getHeader('Last-Modified'),
        'If-Match': this._getHeader('ETag')
      };
      for (header in headers) {
        value = headers[header];
        if (value == null) {
          delete headers[header];
        }
      }
      return headers;
    };

    Resource.prototype._getHeader = function(header) {
      var name, value;
      header = header.toLowerCase();
      return ((function() {
        var ref, results1;
        ref = this._headers;
        results1 = [];
        for (name in ref) {
          value = ref[name];
          if (name.toLowerCase() === header) {
            results1.push(value);
          }
        }
        return results1;
      }).call(this))[0];
    };

    Resource.prototype._getURL = function() {
      var ref;
      if (this.href) {
        return [this.href].concat(slice.call(arguments)).join('/');
      } else {
        return (ref = this._type)._getURL.apply(ref, [this.id].concat(slice.call(arguments)));
      }
    };

    return Resource;

  })(Model);

  ResourcePromise = (function() {
    var method, methodName, ref;

    ResourcePromise.prototype._promise = null;

    function ResourcePromise(_promise) {
      this._promise = _promise;
      if (!(this._promise instanceof Promise)) {
        throw new Error('ResourcePromise requires a real promise instance');
      }
    }

    ResourcePromise.prototype.then = function() {
      var ref;
      return (ref = this._promise).then.apply(ref, arguments);
    };

    ResourcePromise.prototype["catch"] = function() {
      var ref;
      return (ref = this._promise)["catch"].apply(ref, arguments);
    };

    ResourcePromise.prototype.index = function(index) {
      this._promise = this._promise.then(function(value) {
        index = modulo(index, value.length);
        return value[index];
      });
      return this;
    };

    ref = Resource.prototype;
    for (methodName in ref) {
      method = ref[methodName];
      if (typeof method === 'function' && !(methodName in ResourcePromise.prototype)) {
        (function(methodName) {
          return ResourcePromise.prototype[methodName] = function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            this._promise = this._promise.then((function(_this) {
              return function(promisedValue) {
                var resource, result, results;
                results = (function() {
                  var i, len, ref1, results1;
                  ref1 = [].concat(promisedValue);
                  results1 = [];
                  for (i = 0, len = ref1.length; i < len; i++) {
                    resource = ref1[i];
                    result = resource[methodName].apply(resource, args);
                    if (result instanceof this.constructor) {
                      result = result._promise;
                    }
                    results1.push(result);
                  }
                  return results1;
                }).call(_this);
                if (Array.isArray(promisedValue)) {
                  return Promise.all(results);
                } else {
                  return results[0];
                }
              };
            })(this));
            return this;
          };
        })(methodName);
      }
    }

    return ResourcePromise;

  })();

  module.exports = Resource;

  module.exports.Promise = ResourcePromise;

}).call(this);
