runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("httr")
install.packages("shinyBS")
runApp()
install.packages("aws.s3", repos = c("cloudyr" = "http://cloudyr.github.io/drat"))
runApp()
install.packages("aws.s3", repos = c("cloudyr" = "http://cloudyr.github.io/drat"))
shiny::runApp()
projectName
dirPath
oldProjectName <<- gsub("^.*\\/", "", dirPath)
oldProjectName
dirPath
gsub("^.*\\/", "", dirPath)
dirPath
gsub("^.*/", "", dirPath)
gsub("^.*_","_","ATGAS_1121_xxx")
gsub("^.*?_","_","ATGAS_1121")
gsub(".^*?_","_","ATGAS_1121")
gsub(".^*_","_","ATGAS_1121_xxx")
gsub(oldProjectName,projectName,dirPath)
dirPath
dirPath
runApp()
dirPath
shinyjs::html("projectNotes","hello")
runApp()
runApp()
deploymentName
depPath
file.exists(paste0(depPath, ".csv"))
depPath
paste0(depPath,".csv")
runApp()
file.exists(paste0(depPath,"/", deploymentName, ".csv"))
paste0(depPath,"/", deploymentName, ".csv")
runApp()
file.exists(paste0(depPath,"/", depFileName, ".csv"))
depFileName
paste0(depPath,"/", depFileName, ".csv")
runApp()
deploymentCSV$Site.Notes[[1]]
deploymentCSV$Lon[[1]]
deploymentCSV$Name[[1]]
deploymentCSV$Lat[[1]]
runApp()
runApp()
readDeploymentCSV
deploymentCSV
deploymentCSV$Lat
deploymentCSV$Lat[[1]]
deploymentCSV$Lat[1]
deploymentCSV[1,3]
deploymentCSV$Lat[1,1]
deploymentCSV[1,6]
runApp()
dataArray
projectCSV$Project.Name[[1]]
projectNameArg
projectName
dataMatrix
projectNameArg
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$plot_brush$xmin
input$plot_brush$xmax
sound
input$plot_brush$xmin
input$plot_brush$xmax
runApp()
spectroToTime
spectroFromTime
input$plot_brush$xmax
typeof(input$plot_brush$xmax)
runApp()
runApp()
freqSound
xmin
xmax
runApp()
freqSound
install.packages("fftw")
library("fftw")
runApp()
dataSet
formDataSpecies
speciesFields
input[[1]]
input[["maxFreq"]]
input[["minFreq"]]
dataSet
html("maxFreq-span")
runApp()
runApp()
deploymentCSV
runApp()
deploymentCSV
deploymentCSV$Name
deploymentCSV$Name[1]
deploymentCSV$Name[[1]]
deploymentCSV$Name[[2]]
deploymentCSV$Annotation.
deploymentCSV$Annotation.[[1]]
deploymentCSV$Annotation.[[2]]
deploymentCSV$Annotation.[1]
deploymentCSV$Annotation.[2]
deploymentCSV$Annotation.[3]
length(deploymentCSV$Annotation.)
deploymentCSV$Annotation.
runApp()
siteDF
deploymentCSV$Google.Maps[[1]]
siteDF
i
deploymentCSV$Google.Maps[[i]]
dataTable
dataArray
csvLength
deploymentCSV$Start
deploymentCSV$Start[[i]]
deploymentCSV$Start[[2]]
deploymentCSV$Start[[3]]
siteDF
test <- c(deploymentCSV$Name[[i]],deploymentCSV$Lat[[i]],deploymentCSV$Lon[[i]])
test
deploymentCSV$Name[[i]]
deploymentCSV$Name[i]
deploymentCSV$Name[1, i]
deploymentCSV$Name[i, 1]
deploymentCSV$Name[i]
deploymentCSV$Name[7]
test <- c(deploymentCSV$Name[[i]],deploymentCSV$Lat[[i]],deploymentCSV$Lon[[i]])
test
test <- c(deploymentCSV$Name[[i]])
test
test <- c(deploymentCSV$Lon[[i]])
test
deploymentCSV$Lon[[i]]
deploymentCSV$Lon[i]
test <- c(deploymentCSV$Name[i])
test
test <- c(as.character(deploymentCSV$Name[i]))
test
runApp()
siteDF
test <- c(as.character(deploymentCSV$Name[i]))
test
dataArray
dataMatrix
deploymentCSVDataTable
deploymentCSVDataTable
deploymentCSVDataTable
runApp()
depPath
depFilePath
newFileName
depPath
(!is.null(depPath))
depFilePath
csvFileName <<- gsub("^.*\\/", "", depPath)
csvFileName
autoDepCSVLoad
deploymentCSVDataTable
deploymentCSVDataTable
testArray <- c(deploymentCSVDataTable[1,1],deploymentCSVDataTable[1,2],deploymentCSVDataTable[1,3],deploymentCSVDataTable[1,4],deploymentCSVDataTable[1,5],deploymentCSVDataTable[1,6],deploymentCSVDataTable[1,7],deploymentCSVDataTable[1,8],fileFullName, clipCount,dataSet[[1]],dataSet[[2]],durationSmall, dataSet[[4]],dataSet[[3]],dataSet[[5]],dataSet[[6]],dataSet[[7]],dataSet[[8]],dataSet[[9]])
testArray
deploymentCSVDataTable
newCSVDataTable <<- rbind(deploymentCSVDataTable, dataArray)
newCSVDataTable <<- rbind(deploymentCSVDataTable, testArray)
newCSVDataTable
testArray
dataMatrix <- matrix(testArray,ncol = 12, byrow = TRUE)
dataMatrix <- matrix(testArray,ncol = 20, byrow = TRUE)
dataTable <- as.table(dataMatrix)
newCSVDataTable <<- rbind(deploymentCSVDataTable, dataTable)
dataTable
deploymentCSVDataTable
dataMatrix <- matrix(testArray,ncol = 20)
dataTable <- as.table(dataMatrix)
newCSVDataTable <<- rbind(deploymentCSVDataTable, dataTable)
dataTable
dataMatrix
testArray
deploymentCSVDataTable
newCSVDataTable <<- rbind(deploymentCSVDataTable, testArray)
newCSVDataTable
newCSVDataTable <<- rbindList(deploymentCSVDataTable, testArray)
newCSVDataTable <<- rbindlist(deploymentCSVDataTable, testArray)
typeof(testArray)
testArray
runApp()
deploymentCSVDataTable
dataArray <- c(deploymentCSVDataTable[1,1],deploymentCSVDataTable[1,2],deploymentCSVDataTable[1,3],deploymentCSVDataTable[1,4],deploymentCSVDataTable[1,5],deploymentCSVDataTable[1,6],deploymentCSVDataTable[1,7],deploymentCSVDataTable[1,8],fileFullName, clipCount,dataSet[[1]],dataSet[[2]],durationSmall, dataSet[[4]],dataSet[[3]],dataSet[[5]],dataSet[[6]],dataSet[[7]],dataSet[[8]],dataSet[[9]])
dataArray
runApp()
deploymentCSVDataTable
dataArray
deploymentCSVDataTable
rbind(deploymentCSVDataTable, dataArray)
deploymentCSVDataTable
as.data.frame(rbind(deploymentCSVDataTable, dataArray))
write.csv(deploymentCSVDataTable, paste0(depPath,"/",paste0(csvFileName,'.csv')), row.names = FALSE)
typeof(deploymentCSVDataTable)
runApp()
deploymentCSVDataTable
dataArray
typeof(deploymentCSVDataTable)
deploymentCSVDataTable
runApp()
data
dataSet
typeof(dataSet)
dataSet[[10]]
dataSet[[10]] = "hello"
dataSet
HTML('<span>Max Frequency: </span><textarea id="maxFreq" rows="1" cols="40"></textarea>'),
runApp()
dataArray
dataTable
selectedWav
annDataFull
runApp()
selectedWav
tail(selectedWav[[11]], 1)
tail(selectedWav[[9]], 1)
runApp()
runApp()
meanFreqCurr
selectedAnn
annData
df$Time.Min..s.
currentSelectedMin
currentSelectedSpecies
input$annotationDrop
head(strsplit(input$annotationDrop,split="at")[[1]],2)[2]
head(strsplit(input$annotationDrop,split=" at ")[[1]],2)[2]
meanFreqCurr
dataArray
deploymentCSVDataTable
dataSet
dataArray
deploymentCSVDataTable
runApp()
deploymentCSVDataTable
depFilePath
minFreqCurr
currentSelectedMin
currentSelectedSpecies
head(strsplit(input$annotationDrop,split=" at ")[[1]],2)[2]
head(strsplit(input$annotationDrop,split=" at ")[[1]],2)[1]
head(strsplit(input$annotationDrop,split=" at ")[[1]],2)
input$annotationDrop
annData
annData[[6]]
runApp()
deploymentCSVDataTable
xmin
runApp()
minCurr
maxCurr
xmin
deploymentCSVDataTable
xmin
runApp()
deploymentCSVDataTable
deploymentCSVDataTable
xmin
runApp()
runApp()
xmin
deploymentCSVDataTable
runApp()
xmin
dataArray
runApp()
runApp()
deploymentCSVDataTable
runApp()
runApp()
input$noTimeSubmission
input$noTimeSubmission
input$noTimeSubmission
input$noTimeSubmission
runApp()
itemsSpecies
itemsType
runApp()
shiny::runApp()
itemsSpecies
itemsType
filteredSpecies
currentSelectedSpecies
trimws(head(strsplit(input$annotationDrop,split = " at ")[[1]],2)[1], which = "both")
input$annotationDrop
input$typeDropdown
filteredSpecies$Common.Name
runApp()
filteredSpecies
filteredSpecies
filteredSpecies$Common.Name
annCount
input$typeDropdown
input$annotationDrop
is.null(typeCurr)
typeCurr != "Select Type"
typeCurr != ""
typeCurr
typeCurr
speciesList
speciesDF
filteredSpecies
filteredSpecies$Common.Name
annCount
input$typeDropdown
filteredSpecies
runApp()
runApp()
runApp()
runApp()
runApp()
speciesDF
speciesDF[which(speciesDF$Type == typeCurr), ]
filteredSpecies
annCount
input$typeDropdown
species()
shiny::runApp()
currentSelectedSpecies
filterSpecies
filteredSpecies
filteredSpecies$Common.Name
runApp()
filteredSpecies
filteredSpecies
filteredSpecies$Common.Name
itemsType
itemsType
df
df[[1]]
filteredSpecies
filteredSpecies
ablineX
lmDF -> lm(formula = frequencyDF$y ~ frequencyDF$x)
lm(formula = frequencyDF$y ~ frequencyDF$x)
newVar <- lm(formula = frequencyDF$y ~ frequencyDF$x)
newVar$x
newVar
typeof(newVar)
newVar[1]
newVar[[1]]
newVar[[1,1]]
newVar[[1]]$x
newVar[[2]]
newVar[[1]]
install.packages("devtools")
# This loads the devtools library for github installs
library(devtools)
install.packages("shiny")
install.packages('shinyFiles')
install.packages("sound")
install.packages("audio")
install.packages("httr")
install.packages("shinyBS")
# If you are on a Linux distribution, please run this line below, otherwise skip that line
install.packages(c("fftw","tuneR","rgl","rpanel"), repos="http://cran.at.r-project.org/")
install.packages("seewave")
install.packages("stringr")
install.packages("shinydashboard")
install_github("trestletech/shinyTree")
install.packages("shinyjs")
install_github("cloudyr/aws.s3")
# If you are having trouble installing the AWS S3 package, please run the line below.
# install.packages("aws.s3", repos = c("cloudyr" = "http://cloudyr.github.io/drat"), INSTALL_opts = "--no-multiarch")
install.packages("httr")
install.packages("seewave")
install.packages(c("fftw", "tuneR", "rgl", "rpanel"), repos = "http://cran.at.r-project.org/")
install.packages("stringr")
install.packages("shinyBS")
install.packages("shinydashboard")
install.packages("shinyjs")
install.packages("shinyBS")
install.packages("shinyjs")
install.packages("shinyjs")
install.packages("shinyjs")
install.packages("shinyjs")
install.packages("shinyjs")
install.packages("shinyjs")
install.packages("shinyjs")
shiny::runApp()
lineSlope
runApp()
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages('shinyFiles')
install.packages("sound")
install.packages("audio")
install.packages("httr")
install.packages("shinyBS")
install.packages(c("fftw","tuneR","rgl","rpanel"), repos="http://cran.at.r-project.org/")
install.packages("seewave")
install.packages("stringr")
install.packages("shinydashboard")
install_github("trestletech/shinyTree")
install.packages("shinyjs")
library(devtools)
install_github("trestletech/shinyTree")
install_github("cloudyr/aws.s3")
shiny::runApp()
install.packages("shiny")
shiny::runApp()
library(shiny)
shiny::runApp()
shiny::runApp()
minuteDuration
spectroToTime
incrementAmount
soundDuration
runApp()
annData
selectedWav
annDataFull[ ,9:20]
annDataFull
selectedWav
notesLast
notesLast
selectedAnn
notesLast
notesCurr
filteredSpecies
annData[[6]]
tail(annData[[6]], 1)
itemsType
speciesLast
typeLast
selectedWav
runApp()
speciesLast
typeLast
tail(annData[[6]], 1)
speciesCurr
as.character(speciesCurr)
tail(annData[[5]], 1)
tail(annData[[6]], 1)
tail(annData[[6]], 2)
tail(annData[[6]], 3)
annData[[6]]
annData[[6]][[1]]
annData[[6]][[2]]
annData[[6]][[4]]
as.character(annData[[6]][[4]])
as.character(annData[[6]][[4]])
runApp()
runApp()
currentSelectedSpecies
length("")
currentSelectedSpecies
length(currentSelectedSpecies)
runApp()
lineSlopeCurr
selectedAnn
runApp()
incrementAmount
NA
typeof(incrementAmount)
runApp()
xMinLocal
xMinLocal
xMinLocal
sound()
sound
spectroToTime
spectroFromTime
xmin
xmax
runApp()
runApp()
runApp()
currentSelectedSpecies
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyFilesExample()
runApp()
