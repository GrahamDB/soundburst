shiny::runApp('soundBurst-site')
runApp('soundBurst-site')
audio.drivers()
play(sin(1:10000/20))
play("~/1/deployment/Frog_1_2015-04-02_204700_EDT.wav")
setWavPlayer("audacious")
play("~/1/deployment/Frog_1_2015-04-02_204700_EDT.wav")
setWavPlayer("totem")
play("~/1/deployment/Frog_1_2015-04-02_204700_EDT.wav")
runApp('soundBurst-site')
shiny::runApp()
input$directory
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
depPath
getwd()
runApp()
dirPath
parseDirPath(roots=c(home=mainDir), input$directory)
mainDir
input$directory
dirPath
dirPath
dirPath
getwd()
dirPath
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
depPath
data
data
siteDataTable
fileDate
files
autoDepCSVLoad
runApp()
runApp()
runApp()
runApp()
input$plot_brush
input$plot_brush$ymin
input$plot_brush$ymax
runApp()
runApp()
runApp()
round(max(frequencyDF$y, na.rm = T), digits = 2)
runApp()
filteredSound
finalFreq
dfreq(filteredSound, fftw = T, clip = 1, plot = F)
dfreq(filteredSound, fftw = T, clip = 0.99, plot = F)
dfreq(filteredSound, fftw = T, clip = 0.01, plot = F)
dfreq(freqSound, fftw = T, clip = 0.01, plot = F)
dfreq(freqSound, fftw = T, clip = 0.99, plot = F)
dfreq(freqSound, fftw = T, clip = 0.11, plot = F)
filteredSound <- ffilter(freqSound, output = "Wave", fftw = T)
filteredSound <- ffilter(freqSound, from = 0, output = "Wave", fftw = T)
finalFreq <- dfreq(filteredSound, fftw = T, clip = 0.11, plot = F)
finalFreq
freqSound <- readWave(currDir, from = xMin, to = xMax, units = c("seconds"))
Q
Q
Q
runApp()
freqSound <- readWave(currDir, from = 0, to = 60, units = c("seconds"))
filteredSound <- ffilter(freqSound, from = 1000, output = "Wave", fftw = T)
finalFreq <- dfreq(filteredSound, fftw = T, clip = 0.11, plot = F)
finalFreq
finalFreq <- dfreq(freqSound, fftw = T, clip = 0.11, plot = F)
finalFreq
finalFreq <- dfreq(freqSound, fftw = F, clip = 0.11, plot = F)
finalFreq
finalFreq <- dfreq(freqSound, fftw = F, clip = 0.11, plot = T)
finalFreq
dfreq(freqSound, fftw = F, clip = 0.11, plot = T)
currDir
currDirr <-  "/Users/jglatman/Desktop/Project/new_frogs//Frog31_2016-04-27_213200_EDT.wav"
freqSound <- readWave(currDir, from = 0, to = 10, units = c("seconds"))
freqSound <- readWave(currDirr, from = 0, to = 10, units = c("seconds"))
filteredSound <- ffilter(freqSound, from = 1000, output = "Wave", fftw = T)
finalFreq <- dfreq(filteredSound, fftw = T, clip = 0.11, plot = F)
finalFreq <- dfreq(filteredSound, fftw = F, clip = 0.11, plot = T)
finalFreq <- dfreq(filteredSound, fftw = F, clip = 0.15, plot = T)
finalFreq <- dfreq(filteredSound, fftw = F, clip = 0.5, plot = T)
finalFreq <- dfreq(filteredSound, fftw = F, clip = 0.00001, plot = T)
finalFreq <- dfreq(filteredSound, fftw = F, clip = 0.0000000000000000001, plot = T)
filteredSound <- ffilter(freqSound, from = 4000, output = "Wave", fftw = T)
finalFreq <- dfreq(filteredSound, fftw = F, clip = 0.0000000000000000001, plot = T)
plot(freqSound)
shiny::runApp()
depPath
runApp()
files
files[1]
runApp()
eachPath
substrRight(eachPath, 4)
eachPath
fileName <- paste0(depPath,"/",eachPath)
fileName
wavFile <- substr(fileName, attr(regexpr('.*/', fileName),"match.length")+1, nchar(fileName))
wavFile
timeStringLength <- regexpr('_.*_', wavFile)
timeStringLength
matchedString <- timeStringLength + attr(timeStringLength, "match.length")-1
matchedString
fileTime <- substr(wavFile, timeStringLength+1, matchedString-1)
fileTime
timeStringLength
matchedString
wavFile
eachPath
timeStringLength <- regexpr('_.*__', eachPath)
matchedString <- timeStringLength + attr(timeStringLength, "match.length")-1
fileTime <- substr(wavFile, timeStringLength+1, matchedString-1)
fileTime
timeStringLength <- regexpr('__.*_', eachPath)
matchedString <- timeStringLength + attr(timeStringLength, "match.length")-1
fileTime <- substr(wavFile, timeStringLength+1, matchedString-1)
fileTime
timeStringLength <- regexpr('__.*__', eachPath)
matchedString <- timeStringLength + attr(timeStringLength, "match.length")-1
fileTime <- substr(wavFile, timeStringLength+1, matchedString-1)
fileTime
eachPath
newFileName <- gsub(fileTime,"_",eachPath, fixed = TRUE)
newFileName
updatedFileName1 <- sub("_", "",newFileName, fixed = TRUE)
updatedFileName1
updatedFileName2 <- sub("_", "",updatedFileName1, fixed = TRUE)
updatedFileName2
fileName
runApp()
runApp()
updatedWavFileName
updatedWavFilePath
fileNameCountRemoved
runApp()
updatedWavFileName
updatedWavFilePath
fileName
wavFile
timeStringLength
matchedString
fileTime
dateArray
filesArray
dateArray
dateArray[1]
dateArray[2]
as.Date(dateArray[2])
as.Date(dateArray[2], format = "%m-%d-%Y")
as.POSIXct(dateArray[2], origin="1970-01-01")
install.packages("lubridate")
library(lubridate)
ymd("20110604")
ymd(dateArray[2])
as.Date(ymd(dateArray[2]), format = "%m-%d-%Y")
runApp()
runApp()
timeArray
timeArray[length(timeArray)-1]
timeArray[length(timeArray)]
as.Date(timeArray[1])
as.Date(timeArray[2])
timeArray[2]
as.Date(ymd(timeArray[2]))
minTimeVar <<- as.Date(ymd(timeArray[length(timeArray)]))
maxTimeVar <<- as.Date(ymd(timeArray[2]))
renderPrint({cat(as.character(minTimeVar))})
runApp()
shiny::runApp()
shiny::runApp()
data[[1]]
projectName
dirPath
depPath
input$deployment
runApp()
newDepPath
newDepPath <- gsub(data[[1]], input$deployment,depPath)
depPath
data[[1]]
input$deployment
newDepPath <- gsub(input$deployment,data[[1]],depPath)
newDepPath
runApp()
newDirPath
oldProjectName
projectName
dirPath
runApp()
depPath
runApp()
depPath
input$deployment
input$deployment[[2]]
input$deployment[[1]]
input$deployment[[1]]
input$deployment[[1]][1]
input$deployment[[1]][2]
input$deployment[[1]][2][1]
input$deployment[[1]][2][[1]]
depPath
runApp()
input$deployment[[1]][2][[1]]
data[[1]] != input$deployment[[1]][2][[1]]
newDepPath
depPath <<- parseDirPath(root=c(home=normalizePath(dirPath)), data[[1]])
depPath
newDepPath
runApp()
depFilePath
test <- gsub(depPath,newDepPath,depFilePath)
test
runApp()
annotationListCsv
runApp()
length(annotationListCsv) == 0
runApp()
length(annotationListCsv) != 0
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
deploymentCSV
length(deploymentCSV$Name)
as.character(deploymentCSV$yMin[[i]])
as.character(deploymentCSV$yMin[[1]])
if (as.character(deploymentCSV$yMin[[1]]))
runApp()
length(deploymentCSV$Name)
length(as.character(deploymentCSV$Name[[i]]))
length(as.character(deploymentCSV$Name[[1]]))
length(as.character(deploymentCSV$Annotation.[[1]]))
dataArray <- c(as.character(deploymentCSV$Name[[i]]),as.character(deploymentCSV$Lat[[i]]),as.character(deploymentCSV$Lon[[i]]),as.character(deploymentCSV$Record.ID[[i]]), as.character(deploymentCSV$Site.Notes[[i]]), as.character(deploymentCSV$Start[[i]]),as.character(deploymentCSV$End[[i]]),as.character(deploymentCSV$Google.Maps[[i]]))
dataArray <- c(as.character(deploymentCSV$Name[[1]]),as.character(deploymentCSV$Lat[[1]]),as.character(deploymentCSV$Lon[[1]]),as.character(deploymentCSV$Record.ID[[1]]), as.character(deploymentCSV$Site.Notes[[1]]), as.character(deploymentCSV$Start[[1]]),as.character(deploymentCSV$End[[1]]),as.character(deploymentCSV$Google.Maps[[1]]))
dataArray
shiny::runApp()
runApp()
eachPath
fileTime
timeStringLength <- regexpr('/.+?(?=__)/', eachPath)
timeStringLength <- regexpr('^(.*?)abc', eachPath)
matchedString <- timeStringLength + attr(timeStringLength, "match.length")-1
fileTime <- substr(eachPath, timeStringLength+1, matchedString-1)
fileTime
timeStringLength
timeStringLength <- regexpr('.+?(?=abc)', eachPath)
eachPath
test <- sub(".*__","",eachPath)
test
test <- gsub(".*__","",eachPath)
test
timeStringLength <- regexpr('_.*__', eachPath)
matchedString <- timeStringLength + attr(timeStringLength, "match.length")-1
fileTime <- substr(eachPath, timeStringLength+1, matchedString-1)
fileNameCountRemoved
projectName
runApp()
removeType
addProjectName
runApp()
runApp()
runApp()
runApp()
updatedWavFilePath
newFileName
file.exists(paste0(depPath,"/", depFileName, ".csv"))
deploymentName
runApp()
runApp()
file.exists(paste0(depPath,"/", depFileName, ".csv"))
depPath
runApp()
runApp()
runApp()
grepl(eachPath, paste0("_",data[[4]],"_"))
data[[4]]
paste0("_",data[[4]],"_")
eachPath
grepl(paste0("_",data[[4]],"_"), eachPath)
runApp()
grepl(paste0("_",data[[4]],"_"),eachPath)
fileTime
wavFile
fileTime
test <- regexpr('_.*_', fileTime)
test
test2 <- test + attr(test, "match.length")-1
test2
test3 <- substr(fileTime, test1+1, test2-1)
test3 <- substr(fileTime, test+1, test2-1)
test3
test <- regexpr('\_(.*)', fileTime)
test <- regexpr('_(.*)', fileTime)
test
test <- sub(".*_", "", fileTime)
test
runApp()
fileTime
fileTime
test <- sub(".*_", "", fileTime)
test
runApp()
firstTime
firstTime
string
firstTime
string
fileTime < gsub(".*_", "", string)
fileTime <- gsub(".*_", "", string)
fileTime
runApp()
dateArray
dateArray
autoDepCSVLoad
runApp()
runApp()
csvLength
deploymentCSVDataTable
depPath
depFilePath
runApp()
deploymentCSV
deploymentCSV
dataTable
test <- rbind((dataTable))
test
runApp()
dataTable
deploymentCSVDataTable
runApp()
depPath
files
tree
runApp()
tree
runApp()
runApp()
runApp()
runApp()
runApp()
depFilePath
unlist(get_selected(input$tree))
unlist(get_selected(input$tree))
depFilePath
input$tree
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
input$tree
input$tree
input$tree
input$tree
input$tree
input$tree
input$tree[0]
input$tree[[1]]
input$tree[1]
input$loadlist
input$tree
destroy()
shinyTree.initSearch()
runApp()
input$tree
input$tree[1]
runApp()
input$tree[1]
input$tree
input$tree
input$tree
input$tree
input$tree
input$tree
input$tree
output$tree <- renderTree(tree, quoted = FALSE)
input$tree
input$tree
input$tree
input$tree <- NULL
input$tree
runApp()
input$tree
input$tree
input$tree
runApp()
input$tree
input$tree
input$tree
input$tree
runApp()
input$tree
Shiny.bindAll()
bindAll()
runApp()
runApp()
install.packages("V8")
runApp()
shinyjs::extendShinyjs('www/fixTree.js', functions = c("fixTree"))
shinyjs::extendShinyjs('www/fixTree.js')
useShinyjs()
shinyjs::extendShinyjs('www/fixTree.js', functions = c("fixTree"))
runApp()
runApp()
Q
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
