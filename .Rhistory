setwd("~/tgirgin")
getwd()
setwd("~")
library(rgdal)
library(rgeos)
setwd("~/Documents")
setwd("~")
cities = readOGR(dsn="Documents", layer="citiesSyria")
getwd()
cities = readOGR(dsn="Downloads", layer="citiesSyria")
cities@data$other_tags
other <- cities@data$other_tags
head(other)
other.split()
typeof(other)
other[[1]]
typeof(other[[1]])
strsplit(other[[1]])
factor(other, levels=unique(as.character(other)) )
otherFact <- factor(other, levels=unique(as.character(other)) )
other[[1]]
other[[1]][1]
other[[1][1]]
df <- as.data.frame(other)
df
df[1]
df[[1]]
View(df)
df$other[[1]]
typeof(df$other[[1]])
chars <- as.character(other)
chars
head(chars)
head(other)
other[[1]]
typeof(other[[1]])
toString(other[[1]])
strsplit(toString(other[[1]]), ',')
strsplit(other[[1]], ',')
gsub('\','', other[[1]])
gsub('\\','', other[[1]])
gsub('\/\','', other[[1]])
gsub('\\\','', other[[1]])
shiny::runApp('Sites/zooniverse')
runApp('Sites/zooniverse')
shiny::runApp('Sites/zooniverse')
as.character(tail(annData[[5]], 1))
as.character(tail(annData[[6]], 1))
minLast
as.character(speciesCurr)
as.character(typeCurr)
filteredSpecies$Common.Name
as.character(speciesCurr)
san
clipCount
dataArray
deploymentCSVDataTable
deploymentCSVDataTable[0,0]
deploymentCSVDataTable[1,1,]
deploymentCSVDataTable[1,1]
deploymentCSVDataTable[0, 1]
deploymentCSVDataTable[1, 0]
deploymentCSVDataTable
deploymentCSVDataTable
newSequenceBool
annotationListWav
annotationListWav
autoDepCSVLoad
deploymentCSVDataTable
depFilePath
csvLength
deploymentCSV
length(as.character(deploymentCSV$Annotation.[[1]]))
length(as.character(deploymentCSV$Name.[[1]]))
length(as.character(deploymentCSV$Name.[[0]]))
length(as.character(deploymentCSV$Name[[0]]))
length(as.character(deploymentCSV$Name[[1]]))
length(as.character(deploymentCSV$Name))
as.character(deploymentCSV$Name[[i]]
)
as.character(deploymentCSV$Name[[1]]
)
as.character(deploymentCSV$Annotation.[[i]])
as.character(deploymentCSV$Annotation.[[1]])
deploymentCSVDataTable
dataArray
<<<<<<< HEAD
shiny::runApp()
runApp()
eachPath
fileTime
timeStringLength <- regexpr('/.+?(?=__)/', eachPath)
timeStringLength <- regexpr('^(.*?)abc', eachPath)
matchedString <- timeStringLength + attr(timeStringLength, "match.length")-1
fileTime <- substr(eachPath, timeStringLength+1, matchedString-1)
fileTime
timeStringLength
timeStringLength <- regexpr('.+?(?=abc)', eachPath)
eachPath
test <- sub(".*__","",eachPath)
test
test <- gsub(".*__","",eachPath)
test
timeStringLength <- regexpr('_.*__', eachPath)
matchedString <- timeStringLength + attr(timeStringLength, "match.length")-1
fileTime <- substr(eachPath, timeStringLength+1, matchedString-1)
fileNameCountRemoved
projectName
runApp()
removeType
addProjectName
runApp()
runApp()
runApp()
runApp()
updatedWavFilePath
newFileName
file.exists(paste0(depPath,"/", depFileName, ".csv"))
deploymentName
runApp()
runApp()
file.exists(paste0(depPath,"/", depFileName, ".csv"))
depPath
runApp()
runApp()
runApp()
grepl(eachPath, paste0("_",data[[4]],"_"))
data[[4]]
paste0("_",data[[4]],"_")
eachPath
grepl(paste0("_",data[[4]],"_"), eachPath)
runApp()
grepl(paste0("_",data[[4]],"_"),eachPath)
fileTime
wavFile
fileTime
test <- regexpr('_.*_', fileTime)
test
test2 <- test + attr(test, "match.length")-1
test2
test3 <- substr(fileTime, test1+1, test2-1)
test3 <- substr(fileTime, test+1, test2-1)
test3
test <- regexpr('\_(.*)', fileTime)
test <- regexpr('_(.*)', fileTime)
test
test <- sub(".*_", "", fileTime)
test
runApp()
fileTime
fileTime
test <- sub(".*_", "", fileTime)
test
runApp()
firstTime
firstTime
string
firstTime
string
fileTime < gsub(".*_", "", string)
fileTime <- gsub(".*_", "", string)
fileTime
runApp()
dateArray
dateArray
autoDepCSVLoad
runApp()
runApp()
csvLength
deploymentCSVDataTable
depPath
depFilePath
runApp()
deploymentCSV
deploymentCSV
dataTable
test <- rbind((dataTable))
test
runApp()
dataTable
deploymentCSVDataTable
runApp()
depPath
files
tree
runApp()
tree
runApp()
runApp()
runApp()
runApp()
runApp()
depFilePath
unlist(get_selected(input$tree))
unlist(get_selected(input$tree))
depFilePath
input$tree
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
input$tree
input$tree
input$tree
input$tree
input$tree
input$tree
input$tree[0]
input$tree[[1]]
input$tree[1]
input$loadlist
input$tree
destroy()
shinyTree.initSearch()
runApp()
input$tree
input$tree[1]
runApp()
input$tree[1]
input$tree
input$tree
input$tree
input$tree
input$tree
input$tree
input$tree
output$tree <- renderTree(tree, quoted = FALSE)
input$tree
input$tree
input$tree
input$tree <- NULL
input$tree
runApp()
input$tree
input$tree
input$tree
runApp()
input$tree
input$tree
input$tree
input$tree
runApp()
input$tree
Shiny.bindAll()
bindAll()
runApp()
runApp()
install.packages("V8")
runApp()
shinyjs::extendShinyjs('www/fixTree.js', functions = c("fixTree"))
shinyjs::extendShinyjs('www/fixTree.js')
useShinyjs()
shinyjs::extendShinyjs('www/fixTree.js', functions = c("fixTree"))
runApp()
runApp()
Q
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
=======
dataTable
deploymentCSV
deploymentCSVDataTable
dataTable
deploymentCSV
deploymentCSVDataTable
if(deploymentCSVDataTable) { print('love') }
if(is.null(deploymentCSVDataTable)) { print('love') }
deploymentCSVDataTable
deploymentCSVDataTable
is.null(typeCurr)
typeCurr
typeCurr
runApp('Sites/zooniverse')
typeCurr
length(typeCurr)
is.null(typeCurr)
runApp('Sites/zooniverse')
is.null(typeCurr) || length(typeCurr) == 0 || typeCurr != "Select Type"
length(typeCurr)
speciesList
is.null(typeCurr) || length(typeCurr) == 0 || typeCurr != "Select Type"
is.null(typeCurr) || length(typeCurr) == 0 || typeCurr != "Select Type"
runApp('Sites/zooniverse')
runApp('Sites/zooniverse')
xMinLocal
xMaxLocal
runApp('Sites/zooniverse')
xMinLocal
xMaxLocal
freqSound
xMinLocal
xMaxLocal
currDir
xMaxLocal
is.null(xMaxLocal)
length(xMaxLocal)
runApp('Sites/zooniverse')
runApp('Sites/zooniverse')
runApp('Sites/zooniverse')
>>>>>>> d9733a225099e0c63b10bad054c7d80f1f3af430
